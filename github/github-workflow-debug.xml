<Workflow name="Qmasters GitHub workflow for QRadar" version="1.0" xmlns="http://qradar.ibm.com/UniversalCloudRESTAPI/Workflow/V2">
    <Parameters>
        <Parameter name="orgName" label="Organization Name" required="false" />
        <Parameter name="enterpriseName" label="Enterprise Name" required="false" />
        <Parameter name="apiToken" label="API Token" required="true" secret="true" />
        <Parameter name="phrase" label="Search Phrase" required="false"/>
        <Parameter name="perPage" label="Per Page" required="false" default="30" />
        <Parameter name="include" label="Include" required="false" default="web" />
        <Parameter name="timeZone" label="Time Zone" required="false" default="UTC" />
        <Parameter name="startTime" label="Start Time" required="false" default="" />
    </Parameters>

    <Actions>
        <!-- Clear the log source status before a new workflow run starts -->
        <ClearStatus />

        <Set path="/debugLogs" value="DEBUG: log source parameters: orgName: ${/orgName}, enterpriseName: ${/enterpriseName}, phrase: ${/phrase}, perPage: ${/perPage}, include: ${/include}, timeZone: ${/timeZone}, startTime: ${/startTime}"/>

        <PostEvent path="/debugLogs" source="${/identifier}" />

        <!-- Prepere the api url and the log source identifier-->
        <If condition="count(/orgName) > 0" >
            <Set path="/identifier" value="${/orgName}"/>
            <Set path="/apiPath" value="orgs/${/orgName}"/>
        </If>
        <Else>
            <Set path="/identifier" value="${/enterpriseName}"/>
            <Set path="/apiPath" value="enterprises/${/enterpriseName}"/>
        </Else>

        <Set path="/debugLogs" value="DEBUG: api Path: ${/apiPath}"/>
        <PostEvent path="/debugLogs" source="${/identifier}" />

        <!-- Initialize the risingValue filter for the first run. -->
        <If condition="count(/startTime) > 0" >
            <Initialize path="/bookmark" value="${/startTime}"/>

        </If>
        <Else>
            <Initialize path="/bookmark" value="${time() - 3600000}" />
        </Else>

        <Set path="/debugLogs" value="DEBUG: bookmark: ${/bookmark}"/>
        <PostEvent path="/debugLogs" source="${/identifier}" />

        <!-- Prepare the start date filter, based on the current bookmark -->
        <FormatDate pattern="yyyy-MM-dd'T'HH:mm:ss" time="${/bookmark}" timeZone="${/timeZone}" savePath="/startTime" />

        <Set path="/debugLogs" value="DEBUG: bookmark after format: ${/bookmark}"/>
        <PostEvent path="/debugLogs" source="${/identifier}" />

        <!-- Set the firse page number -->
        <Set path="/pageNumber" value="1"/>

        <!-- Get Logs -->
        <CallEndpoint url="https://api.github.com/${/apiPath}/audit-log" method="GET" savePath="/getLogs">
            <BearerAuthentication token="${/apiToken}" />
            <QueryParameter name="phrase" value="created:>=${/startTime}+${/phrase}" omitIfEmpty="true"/>
            <QueryParameter name="per_page" value="${/perPage}" omitIfEmpty="true"/>
            <QueryParameter name="include" value="${/include}" omitIfEmpty="true"/>
            <QueryParameter name="order" value="desc"/>
        </CallEndpoint>

        <!-- Handle Errors -->
        <If condition="/getLogs/status_code != 200">
            <Log type="ERROR" message="GitHub API error: ${/getLogs}"/>
            <Abort reason="GitHub abort reason: ${/getLogs/body/message}" />
        </If>

        <!-- Post Events, if any -->
        <If condition="count(/getLogs/body) > 0">
            <PostEvents path="/getLogs/body" source="${/identifier}" />
        </If>

        <Set path="/debugLogs" value="DEBUG: full Response: ${/getLogs}"/>
        <PostEvent path="/debugLogs" source="${/identifier}" />

        <!-- Prepare the lastEventsTime path -->
        <Set path="/lastEventsTime" value="[]"/>
        <Set path="/numberOfEvents" value="[]"/>

        <!-- Merge the log data from the API response into the "/lastEventsTime" path. -->
        <Merge targetPath="/lastEventsTime" sourcePath="/getLogs/body/'@timestamp'" />

        <!-- Set the number of events -->
        <Set path="/currentFetchEvents" value="${count(/getLogs/body/_document_id)}"/>
        <Set path="/numberOfEvents" value="${count(/getLogs/body/_document_id)}"/>

        <Log type="INFO" message="Page number: ${/pageNumber}, Number of events in this fetched: ${/currentFetchEvents}"/>

        <!-- Pattern for URL within headers.link of the requst -->
        <Set path="/pattern" value='^&lt;(.*)&gt;; rel="next"'/>
        <!-- The regex pattern matching to capture the 'link' header value from /getLogs/headers. -->
        <RegexCapture value="${/getLogs/headers/link}" pattern="${/pattern}" savePath="/nextLink" />

        <Set path="/debugLogs" value="DEBUG: next Link: ${/nextLink}"/>
        <PostEvent path="/debugLogs" source="${/identifier}" />

        <!-- This loop runs as long as there is a next link available -->
        <While condition="count(/nextLink) > 0">

        <Set path="/debugLogs" value="DEBUG: next Link: ${/nextLink}"/>
        <PostEvent path="/debugLogs" source="${/identifier}" />

            <!-- Make another API call using the next link -->
            <CallEndpoint url="${/nextLink}" method="GET" savePath="/getLogs">
                <BearerAuthentication token="${/apiToken}" />
            </CallEndpoint>

            <!-- Handle Errors -->
            <If condition="/getLogs/status_code != 200">
                <Log type="ERROR" message="GitHub API error: ${/getLogs}"/>
                <Abort reason="GitHub abort reason: ${/getLogs/body/message}" />
            </If>

            <!-- Post Events, if any -->
            <If condition="count(/getLogs/body) > 0">
                <PostEvents path="/getLogs/body" source="${/identifier}" />
            </If>

            <Set path="/debugLogs" value="DEBUG: full Response: ${/getLogs}"/>
            <PostEvent path="/debugLogs" source="${/identifier}" />

            <!-- Set the number of events -->
            <Set path="/currentFetchEvents" value="${count(/getLogs/body/_document_id)}"/>
            <Set path="/numberOfEvents" value="${/numberOfEvents + /currentFetchEvents}"/>

            <Set path="/debugLogs" value="DEBUG: number Of Events: ${/numberOfEvents}"/>
            <PostEvent path="/debugLogs" source="${/identifier}" />

            <!-- Set the next page number -->
            <Set path="/pageNumber" value="${/pageNumber + 1}"/>
            <Log type="INFO" message="Page number: ${/pageNumber}, Number of events in this fetched: ${/currentFetchEvents}"/>

            <Set path="/debugLogs" value="DEBUG: Page number: ${/pageNumber}, Number of events in this fetched: ${/currentFetchEvents}"/>
            <PostEvent path="/debugLogs" source="${/identifier}" />

            <!-- Merge the log times from the API response into the "/lastEventsTime" path. -->
            <Merge targetPath="/lastEventsTime" sourcePath="/getLogs/body/'@timestamp'" />

            <!-- Extract the next link for the next iteration -->
            <RegexCapture value="${/getLogs/headers/link}" pattern="${/pattern}" savePath="/nextLink" />
        </While>

        <Log type="INFO" message="Total number of fetched events: ${/numberOfEvents}."/>

        <Set path="/debugLogs" value="DEBUG: Total number of fetched events: ${/numberOfEvents}"/>
        <PostEvent path="/debugLogs" source="${/identifier}" />

        <If condition="count(/lastEventsTime) > 0">
            <!-- Update the bookmark -->
            <FormatDate pattern="yyyy-MM-dd'T'HH:mm:ss" time="${max(/lastEventsTime)}" savePath="/lastEvent" />

            <Set path="/debugLogs" value="DEBUG: number Of Events: ${/numberOfEvents}"/>
            <PostEvent path="/debugLogs" source="${/identifier}" />

            <Set path="/debugLogs" value="DEBUG: max event time: ${max(/lastEventsTime)}"/>
            <PostEvent path="/debugLogs" source="${/identifier}" />

            <Log type="info" message="5 ${max(/lastEventsTime)}"/>
            <Set path="/lastEventsTime" value="${max(/lastEventsTime)}" />
            <Log type="info" message="5 ${/lastEventsTime}"/>

            <Set path="/debugLogs" value="DEBUG: last event time: ${/lastEventsTime}"/>
            <PostEvent path="/debugLogs" source="${/identifier}" />


            <Set path="/bookmark" value="${/lastEventsTime + 1000}" />
            <Log type="info" message="7 ${/bookmark}"/>

            <Set path="/debugLogs" value="DEBUG: bookmark: ${/bookmark}"/>
            <PostEvent path="/debugLogs" source="${/identifier}" />

        </If>

    </Actions>

    <Tests>
        <DNSResolutionTest host="api.github.com" />
        <TCPConnectionTest host="api.github.com" />
        <SSLHandshakeTest host="api.github.com" />
        <HTTPConnectionThroughProxyTest url="api.github.com" expectedResponseStatus="404" />
    </Tests>
</Workflow>
