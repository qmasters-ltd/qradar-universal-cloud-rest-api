<Workflow name="Qmasters Fortress workflow for QRadar" version="1.0" xmlns="http://qradar.ibm.com/UniversalCloudRESTAPI/Workflow/V2">
    <Parameters>
        <Parameter name="api_host" label="Host Name" required="true" />
        <Parameter name="api_key" label="API Key" required="true" secret="true" />
        <Parameter name="api_secert" label="API Secret" required="true" secret="true" />
        <Parameter name="severity" label="Severity" required="false" default="CRITICAL,HIGH,MEDIUM,LOW,NONE"/>
        <Parameter name="status" label="Status" required="false" default="OPEN,CLOSED,DISMISSED,QUARANTINED,NO_CAPACITY,DETECTED,MITIGATED" />
        <Parameter name="service_type" label="Service Type" required="false" default="EDP,WEB,MAIL,CLOUD_STORAGE,VMDR,ATTACK_SIMULATOR,MERLIN_AI,SANDBOX" />
        <Parameter name="page_size" label="Page Size" required="false" default="100" />
        <Parameter name="time_zone" label="Time Zone" required="false" default="UTC" />
    </Parameters>

    <Actions>
        <!-- Clear the log source status before a new workflow run starts -->
        <ClearStatus />

        <!-- Initialize the risingValue filter for the first run. -->
        <Initialize path="/bookmark" value="${time() - 604800000}" />

        <!-- Prepare the start date filter, based on the current bookmark -->
        <FormatDate pattern="yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" time="${/bookmark}" timeZone="${/time_zone}" savePath="/start_date" />

        <!-- Prepare the end date filter, which is the current time. -->
        <FormatDate pattern="yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" timeZone="${/time_zone}" savePath="/end_date" />

        <!-- Get Alerts -->				
        <CallEndpoint url="${/api_host}/v1/alert/search" method="POST" savePath="/get_alerts" >
            <RequestHeader name="x-api-key" value="${/api_key}" />
            <RequestHeader name="x-api-secret" value="${/api_secert}" />
            <RequestBody type="application/json" encoding="UTF-8">
                {
                    "pagination": {
                        "skip": 0,
                        "take": ${/page_size}
                    },
                    "severity":
                    [
                        ${/severity}
                    ],
                    "status":
                    [
                        ${/status}
                    ],
                    "serviceType":
                    [
                        ${/service_type}
                    ],
                    "createdAt": {
                        "startDate": "${/start_date}",
                        "endDate": "${/end_date}"
                    }
                }
            </RequestBody>
        </CallEndpoint>

        <!-- Handle Errors -->
        <If condition="/get_alerts/status_code != 200">
            <If condition="/get_alerts/status_code = 403" >
                <Abort reason="This key has no satisfied permissions" />
            </If>
            <If condition="/get_alerts/status_code = 404" >
                <Abort reason="Invalid token or token expired." />
            </If>

            <If condition="/get_alerts/status_code = 400" >
                <Abort reason="Bad input parameter." />
            </If>

            <If condition="/get_alerts/status_code >= 500" >
                <Abort reason="Fortress API is not available" />
            </If>

            <Abort reason="Fortress abort reason:  ${/get_alerts}" />
        </If>

        <!-- Post Events, if any -->
            <If condition="count(/get_alerts/body/records) > 0">
                <PostEvents path="/get_alerts/body/records" source="${/api_host}" />

                <!-- Update the bookmark -->
                <ParseDate pattern="yyyy-MM-dd'T'HH:mm:ss[.SSS]'Z'" timeZone="${/time_zone}" date="${max(/get_alerts/body/records/createdAt)}" savePath="/last_event_time" />
            <Log type="info" message="${/last_event_time}"/>
                <Set path="/bookmark" value="${/last_event_time + 1}" />

            </If>
    </Actions>	
    <Tests>
        <DNSResolutionTest host="${/api_host}" />
        <TCPConnectionTest host="${/api_host}" />
        <SSLHandshakeTest host="${/api_host}" />
        <HTTPConnectionThroughProxyTest url="${/api_host}" expectedResponseStatus="404" />
    </Tests>
</Workflow>